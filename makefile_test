CC = g++
CUCC = nvcc -m64 -ccbin $(CC)
TARGET = testtrt

TRIPLE?=x86_64-linux
CUDA_INSTALL_DIR = /usr/local/cuda-8.0
CUDA_LIBDIR = lib
CUDNN_LIBDIR = lib64
INCPATHS    =-I"$(CUDA_INSTALL_DIR)/include" -I"/usr/local/include" -I"../include" -I"../common" -I"$(CUDNN_INSTALL_DIR)/include" -I"../../include" $(TGT_INCLUDES)
LIBPATHS    =-L"$(CUDA_INSTALL_DIR)/targets/$(TRIPLE)/$(CUDA_LIBDIR)" -L"/usr/local/lib" -L"../lib" -L"$(CUDA_INSTALL_DIR)/$(CUDA_LIBDIR)" -L"$(CUDNN_INSTALL_DIR)/$(CUDNN_LIBDIR)" -L"../../lib" $(TGT_LIBS)
# COMMON_LIBS = -lcudnn -lcublas -lcudart_static -lnvToolsExt -lcudart
COMMON_LIBS = -lcudnn -lcudart -lcudart_static


$(TARGET): test.o tensorUtil.o tensorCuda.o
	$(CC) -Wall -g test.o tensorUtil.o tensorCuda.o -o testtrt $(INCPATHS) $(LIBPATHS) $(COMMON_LIBS)
test.o: test.cu tensorUtil.h tensorCuda.h
	$(CUCC) -g -c test.cu $(INCPATHS) $(LIBPATHS) $(COMMON_LIBS)
tensorUtil.o: tensorUtil.cu tensorUtil.h tensorCuda.h
	$(CUCC) -g -c tensorUtil.cu $(INCPATHS) $(LIBPATHS) $(COMMON_LIBS)
tensorCuda.o: tensorCuda.cu tensorCuda.h
	$(CUCC) -g -c tensorCuda.cu $(INCPATHS) $(LIBPATHS) $(COMMON_LIBS)

clean:
	rm -f *.o
